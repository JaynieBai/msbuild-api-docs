<Type Name="CompositeGlob" FullName="Microsoft.Build.Globbing.CompositeGlob">
  <TypeSignature Language="C#" Value="public class CompositeGlob : Microsoft.Build.Globbing.IMSBuildGlob" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompositeGlob extends System.Object implements class Microsoft.Build.Globbing.IMSBuildGlob" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Build.Globbing.CompositeGlob" />
  <TypeSignature Language="VB.NET" Value="Public Class CompositeGlob&#xA;Implements IMSBuildGlob" />
  <TypeSignature Language="F#" Value="type CompositeGlob = class&#xA;    interface IMSBuildGlob" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompositeGlob : Microsoft::Build::Globbing::IMSBuildGlob" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build</AssemblyName>
    <AssemblyVersion>15.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Build.Globbing.IMSBuildGlob</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
                A composite glob that returns a match for an input if any of its
                inner globs match the input (disjunction).
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositeGlob (params Microsoft.Build.Globbing.IMSBuildGlob[] globs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Build.Globbing.IMSBuildGlob[] globs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Globbing.CompositeGlob.#ctor(Microsoft.Build.Globbing.IMSBuildGlob[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray globs As IMSBuildGlob())" />
      <MemberSignature Language="F#" Value="new Microsoft.Build.Globbing.CompositeGlob : Microsoft.Build.Globbing.IMSBuildGlob[] -&gt; Microsoft.Build.Globbing.CompositeGlob" Usage="new Microsoft.Build.Globbing.CompositeGlob globs" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompositeGlob(... cli::array &lt;Microsoft::Build::Globbing::IMSBuildGlob ^&gt; ^ globs);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="globs" Type="Microsoft.Build.Globbing.IMSBuildGlob[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="globs">Children globs. Input gets shallow cloned</param>
        <summary>
                Constructor
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositeGlob (System.Collections.Generic.IEnumerable&lt;Microsoft.Build.Globbing.IMSBuildGlob&gt; globs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Build.Globbing.IMSBuildGlob&gt; globs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Globbing.CompositeGlob.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Build.Globbing.IMSBuildGlob})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (globs As IEnumerable(Of IMSBuildGlob))" />
      <MemberSignature Language="F#" Value="new Microsoft.Build.Globbing.CompositeGlob : seq&lt;Microsoft.Build.Globbing.IMSBuildGlob&gt; -&gt; Microsoft.Build.Globbing.CompositeGlob" Usage="new Microsoft.Build.Globbing.CompositeGlob globs" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompositeGlob(System::Collections::Generic::IEnumerable&lt;Microsoft::Build::Globbing::IMSBuildGlob ^&gt; ^ globs);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="globs" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Build.Globbing.IMSBuildGlob&gt;" />
      </Parameters>
      <Docs>
        <param name="globs">Children globs. Input gets shallow cloned</param>
        <summary>
                Constructor
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.Build.Globbing.IMSBuildGlob Create (System.Collections.Generic.IEnumerable&lt;Microsoft.Build.Globbing.IMSBuildGlob&gt; globs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Build.Globbing.IMSBuildGlob Create(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Build.Globbing.IMSBuildGlob&gt; globs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Globbing.CompositeGlob.Create(System.Collections.Generic.IEnumerable{Microsoft.Build.Globbing.IMSBuildGlob})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (globs As IEnumerable(Of IMSBuildGlob)) As IMSBuildGlob" />
      <MemberSignature Language="F#" Value="static member Create : seq&lt;Microsoft.Build.Globbing.IMSBuildGlob&gt; -&gt; Microsoft.Build.Globbing.IMSBuildGlob" Usage="Microsoft.Build.Globbing.CompositeGlob.Create globs" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::Build::Globbing::IMSBuildGlob ^ Create(System::Collections::Generic::IEnumerable&lt;Microsoft::Build::Globbing::IMSBuildGlob ^&gt; ^ globs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Globbing.IMSBuildGlob</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="globs" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Build.Globbing.IMSBuildGlob&gt;" Index="0" FrameworkAlternate="msbuild-17;msbuild-17-netcore" />
      </Parameters>
      <Docs>
        <param name="globs">An enumeration of globs to compose.</param>
        <summary>
                Creates an <see cref="T:Microsoft.Build.Globbing.IMSBuildGlob" /> that aggregates multiple other globs
                such that the resulting glob matches when any inner glob matches (disjunction).
            </summary>
        <returns>The logical disjunction of the input globs.</returns>
        <remarks>
          <para>
                    When <paramref name="globs" /> contains no elements, a singleton glob is
                    returned that never matches, regardless of input.
                </para>
          <para>
                    When <paramref name="globs" /> contains one element, that single element is
                    returned directly. This avoids allocating a redundant wrapper instance.
                </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Globs">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.Build.Globbing.IMSBuildGlob&gt; Globs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Build.Globbing.IMSBuildGlob&gt; Globs" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Globbing.CompositeGlob.Globs" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Globs As IEnumerable(Of IMSBuildGlob)" />
      <MemberSignature Language="F#" Value="member this.Globs : seq&lt;Microsoft.Build.Globbing.IMSBuildGlob&gt;" Usage="Microsoft.Build.Globbing.CompositeGlob.Globs" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;Microsoft::Build::Globbing::IMSBuildGlob ^&gt; ^ Globs { System::Collections::Generic::IEnumerable&lt;Microsoft::Build::Globbing::IMSBuildGlob ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Build.Globbing.IMSBuildGlob&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The direct children of this composite
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMatch">
      <MemberSignature Language="C#" Value="public bool IsMatch (string stringToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsMatch(string stringToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Globbing.CompositeGlob.IsMatch(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsMatch (stringToMatch As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsMatch : string -&gt; bool&#xA;override this.IsMatch : string -&gt; bool" Usage="compositeGlob.IsMatch stringToMatch" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsMatch(System::String ^ stringToMatch);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Build.Globbing.IMSBuildGlob.IsMatch(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stringToMatch">The string to match. If the string represents a relative path, it will get normalized against the glob's root. Cannot be <see langword="null" />.</param>
        <summary>Matches the given <paramref name="stringToMatch" /> against the glob.</summary>
        <returns>
          <see langword="false" /> if <paramref name="stringToMatch" /> contains invalid path or file characters; <see langword="true" /> otherwise.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Matching is path aware:

- Slashes are normalized.
- Arguments representing relative paths are normalized against the glob's root.

For example, the glob `**/*.cs` does not match `../a.cs`, since `../a.cs` points outside of the glob root.

          ]]></format>
        </remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
