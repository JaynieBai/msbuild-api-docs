<Type Name="IDirectoryCache" FullName="Microsoft.Build.FileSystem.IDirectoryCache">
  <TypeSignature Language="C#" Value="public interface IDirectoryCache" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IDirectoryCache" FrameworkAlternate="msbuild-17" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Build.FileSystem.IDirectoryCache" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDirectoryCache" />
  <TypeSignature Language="F#" Value="type IDirectoryCache = interface" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDirectoryCache" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDirectoryCache" FrameworkAlternate="msbuild-17-netcore" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build</AssemblyName>
    <AssemblyVersion>15.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Allows the implementor to intercept file existence checks and file enumerations performed during project evaluation.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="DirectoryExists">
      <MemberSignature Language="C#" Value="public bool DirectoryExists (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DirectoryExists(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.FileSystem.IDirectoryCache.DirectoryExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DirectoryExists (path As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member DirectoryExists : string -&gt; bool" Usage="iDirectoryCache.DirectoryExists path" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool DirectoryExists(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">A full and normalized path.</param>
        <summary>
            Returns <code>true</code> if the given path points to an existing directory on disk.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateDirectories&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;TResult&gt; EnumerateDirectories&lt;TResult&gt; (string path, string pattern, Microsoft.Build.FileSystem.FindPredicate predicate, Microsoft.Build.FileSystem.FindTransform&lt;TResult&gt; transform);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; EnumerateDirectories&lt;TResult&gt;(string path, string pattern, class Microsoft.Build.FileSystem.FindPredicate predicate, class Microsoft.Build.FileSystem.FindTransform`1&lt;!!TResult&gt; transform) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.FileSystem.IDirectoryCache.EnumerateDirectories``1(System.String,System.String,Microsoft.Build.FileSystem.FindPredicate,Microsoft.Build.FileSystem.FindTransform{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function EnumerateDirectories(Of TResult) (path As String, pattern As String, predicate As FindPredicate, transform As FindTransform(Of TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="abstract member EnumerateDirectories : string * string * Microsoft.Build.FileSystem.FindPredicate * Microsoft.Build.FileSystem.FindTransform&lt;'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="iDirectoryCache.EnumerateDirectories (path, pattern, predicate, transform)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ EnumerateDirectories(System::String ^ path, System::String ^ pattern, Microsoft::Build::FileSystem::FindPredicate ^ predicate, Microsoft::Build::FileSystem::FindTransform&lt;TResult&gt; ^ transform);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="predicate" Type="Microsoft.Build.FileSystem.FindPredicate" />
        <Parameter Name="transform" Type="Microsoft.Build.FileSystem.FindTransform&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The desired return type.</typeparam>
        <param name="path">The directory to enumerate, specified as a full normalized path.</param>
        <param name="pattern">A search pattern supported by the platform which is guaranteed to return a superset of relevant directories.</param>
        <param name="predicate">A predicate to test whether a directory should be included.</param>
        <param name="transform">A transform from <code>ReadOnlySpan&lt;char&gt;</code> to <typeparamref name="TResult" />.</param>
        <summary>
            Enumerates subdirectories in the given directory only (non-recursively).
            </summary>
        <returns>To be added.</returns>
        <remarks>
            The <paramref name="pattern" /> parameter may match more direcories than what the caller is interested in. In other words,
            <paramref name="predicate" /> can return <code>false</code> even if the implementation enumerates only directories whose names
            match the pattern. The implementation is free to ignore the pattern and call the predicate for all directories on the given
            <paramref name="path" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateFiles&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;TResult&gt; EnumerateFiles&lt;TResult&gt; (string path, string pattern, Microsoft.Build.FileSystem.FindPredicate predicate, Microsoft.Build.FileSystem.FindTransform&lt;TResult&gt; transform);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; EnumerateFiles&lt;TResult&gt;(string path, string pattern, class Microsoft.Build.FileSystem.FindPredicate predicate, class Microsoft.Build.FileSystem.FindTransform`1&lt;!!TResult&gt; transform) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.FileSystem.IDirectoryCache.EnumerateFiles``1(System.String,System.String,Microsoft.Build.FileSystem.FindPredicate,Microsoft.Build.FileSystem.FindTransform{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function EnumerateFiles(Of TResult) (path As String, pattern As String, predicate As FindPredicate, transform As FindTransform(Of TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="F#" Value="abstract member EnumerateFiles : string * string * Microsoft.Build.FileSystem.FindPredicate * Microsoft.Build.FileSystem.FindTransform&lt;'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="iDirectoryCache.EnumerateFiles (path, pattern, predicate, transform)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ EnumerateFiles(System::String ^ path, System::String ^ pattern, Microsoft::Build::FileSystem::FindPredicate ^ predicate, Microsoft::Build::FileSystem::FindTransform&lt;TResult&gt; ^ transform);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="predicate" Type="Microsoft.Build.FileSystem.FindPredicate" />
        <Parameter Name="transform" Type="Microsoft.Build.FileSystem.FindTransform&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The desired return type.</typeparam>
        <param name="path">The directory to enumerate, specified as a full normalized path.</param>
        <param name="pattern">A search pattern supported by the platform which is guaranteed to return a superset of relevant files.</param>
        <param name="predicate">A predicate to test whether a file should be included.</param>
        <param name="transform">A transform from <code>ReadOnlySpan&lt;char&gt;</code> to <typeparamref name="TResult" />.</param>
        <summary>
            Enumerates files in the given directory only (non-recursively).
            </summary>
        <returns>To be added.</returns>
        <remarks>
            The <paramref name="pattern" /> parameter may match more files than what the caller is interested in. In other words,
            <paramref name="predicate" /> can return <code>false</code> even if the implementation enumerates only files whose names
            match the pattern. The implementation is free to ignore the pattern and call the predicate for all files on the given
            <paramref name="path" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileExists">
      <MemberSignature Language="C#" Value="public bool FileExists (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool FileExists(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.FileSystem.IDirectoryCache.FileExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileExists (path As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member FileExists : string -&gt; bool" Usage="iDirectoryCache.FileExists path" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool FileExists(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build</AssemblyName>
        <AssemblyVersion>15.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">A full and normalized path.</param>
        <summary>
            Returns <code>true</code> if the given path points to an existing file on disk.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
